pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: docker
                    image: docker:dind
                    securityContext:
                      privileged: true
                    volumeMounts:
                      - name: dind-storage
                        mountPath: /var/lib/docker
                  volumes:
                    - name: dind-storage
                      emptyDir: {}
            '''
        }
    }
    environment {
        PATH = "$HOME/.local/bin:$PATH"
        APP_MANIFESTS_PATH = "jenkins/app-manifests"
    }
    stages {
        stage('Setup Kubectl') {
            steps {
                sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
                sh "chmod +x ./kubectl"
                sh '''
                mkdir -p $HOME/.local/bin
                mv kubectl $HOME/.local/bin/kubectl
                chmod +x $HOME/.local/bin/kubectl
                '''
            }
        }

        stage('Switch Traffic To Green') {
          steps {
            script {
                  // Update app-service selector to point to green deployment
                  sh '''
                      kubectl patch service app-service -n default -p '{"spec":{"selector":{"version":"green"}}}'
                  '''
                  
                  def nodeIP = sh(
                      script: "kubectl get nodes -n default -o jsonpath='{.items[0].status.addresses[?(@.type==\"InternalIP\")].address}'",
                      returnStdout: true
                  ).trim()
                  
                  def servicePort = sh(
                      script: "kubectl get svc app-service -n default -o jsonpath='{.spec.ports[0].nodePort}'",
                      returnStdout: true
                  ).trim()

                  echo "Traffic switched to green deployment"
                  echo "Please verify the application at: http://${nodeIP}:${servicePort}"
                }
            }
        }

        stage('Manual Approval') {
            steps {
                script {                    
                    def userInput = input(
                      message: 'Verify the green deployment and choose to proceed or rollback',
                      parameters: [
                          choice(
                              name: 'ACTION',
                              choices: ['proceed', 'rollback'],
                              description: 'Select action to take'
                          )
                      ]
                  )
                    
                   if (userInput == 'proceed') {
                      echo "Proceeding with deployment finalization..."
                      
                      // Get green deployment image
                      def greenImage = sh(
                          script: "kubectl get deployment green-deployment -n default -o jsonpath='{.spec.template.spec.containers[0].image}'",
                          returnStdout: true
                      ).trim() 

                    // Update blue deployment with green image
                      sh """
                          kubectl set image deployment/app-deployment demo-app=${greenImage} -n default
                          kubectl patch service app-service -n default -p '{"spec":{"selector":{"version":"blue"}}}'
                          
                          # Wait for blue deployment to be ready
                          kubectl rollout status deployment/app-deployment -n default
                          
                          # Clean up green resources
                          kubectl delete deployment green-deployment -n default
                          kubectl delete service green-service -n default
                      """
                      
                      echo "Deployment completed successfully. Traffic restored to blue deployment with new image."
                  } else {
                    echo "Rolling back..."
                      sh """
                          kubectl patch service app-service -n default -p '{"spec":{"selector":{"version":"blue"}}}'
                          kubectl delete deployment green-deployment -n default
                          kubectl delete service green-service -n default
                      """
                      echo "Rollback completed. Traffic restored to blue deployment."
                  }
                }
            }
        }
    }
}
